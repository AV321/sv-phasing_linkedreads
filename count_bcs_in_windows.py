#!/usr/bin/env python


"""

:Author: Ji Research Group/Stanford Genome Technology Center
:Contact: sgreer2@stanford.edu
:Creation date: 24.11.2016
:Description: 

This script counts the number of unique barcodes in windows around the SV breakpoints

This script requires:
- all of the python packages listed (imported) below
	
Revisions:
None to date

CURRENT VERSION: 1.0

"""

cur_version = 1.0

### LOAD THE NECESSARY PACKAGES ###

import sys
import os
import __main__ as main
import argparse

import sys
import pandas as pd
import pysam
import numpy as np


MIN_MAPQ = 0
PERF_CIGAR = False

#sv_file = "/mnt/ix1/Projects/M002_131217_gastric/P00526/P00526_WG10_150722_gastric/A15_161107_final_svs/metl/phase/tum.sv_bcs.txt"
#bam_file = "/mnt/ix1/Projects/M002_131217_gastric/P00526/P00526_WG10_150722_gastric/A15_161107_final_svs/metl/phase/phased_possorted_bam_2725.bam"

#################################################################
################                                 ################
################        PARSE THE ARGUMENTS      ################
################                                 ################
#################################################################

### ARGPARSE PARSING ###

def usage():
	print "Usage examples:"
	print os.path.basename(main.__file__) + " --help"
	print os.path.basename(main.__file__) + " -v longranger_svs_tumor.sv_bcs.txt -b longranger_tumor.bam -l 500000 -w 1000"
	sys.exit(0)

def parse_args():
	parser = argparse.ArgumentParser(description = "A Python script for annotating the SVs called by longranger")
	parser.add_argument("--usage", help="usage example", dest="usage", action='store_true')
	parser.add_argument("-v", help="Output file of phase_svs.py (out_prefix.sv_bcs.txt) (REQUIRED)", dest="sv_in")
	parser.add_argument("-b", help="BAM file for tumor sample generated by longranger (REQUIRED)", dest="bam_in")
	parser.add_argument("-l", help="full window size (default: 500,000)", dest="full_wndw_in", default = int(500000))
	parser.add_argument("-w", help="count window size (default: 1000)", dest="count_wndw_in", default = int(1000))
	parser.add_argument("--version", action='version', version='%(prog)s ' + str(cur_version))	
	return parser.parse_args()


if __name__ == '__main__':
	args = parse_args()
	if(args.usage):
		usage()
	if(not args.sv_in or not args.bam_in):
		print os.path.basename(main.__file__) + " missing a required input file\n"
		usage()
		sys.exit(1)

### SET THE ARGUMENTS ###

sv_file = args.sv_in
bam_file = args.bam_in
full_w_size = int(args.full_wndw_in)
small_w_size = int(args.count_wndw_in)


## DEFINE FUNCTION TO CREATE WINDOWS AROUND BREAKPOINTS

def make_window(s,e,w):
    cur_size = e-s
    adj_val = (w-cur_size)/2
    adj_val = int(round(adj_val,0))
    new_start = s - adj_val
    new_end = e + adj_val
    return [new_start,new_end]

## DEFINE FUNCTION TO OBTAIN BARCODES FROM BAM FILE FOR SPECIFIC REGIONS

def get_barcode_ids(bam_in, chrom, start, end, min_mapq, perf_cigar):
        bcs = []
        for r in bam_in.fetch(chrom, start, end):
                if r.mapq >= min_mapq and (not(perf_cigar) or (not(r.cigar is None) and len(r.cigar) == 1)):
                        if r.has_tag("BX"):
                                bc_id=r.get_tag("BX")
                                bcs.append(bc_id)
        return list(bcs)


sv_df = pd.read_table(sv_file, sep="\t")

sv_df1 = sv_df[['name1','chrom1','start1','stop1','bc_overlap_id']]
sv_df2 = sv_df[['name2','chrom2','start2','stop2','bc_overlap_id']]
full_names = ['name','chrom','start','stop','bc_overlap_id']
sv_df1.columns = full_names
sv_df2.columns = full_names
sv_df_full = pd.concat([sv_df1,sv_df2])
print sv_df_full


w_start_list = [x[0] for x in sv_df_full.apply(lambda row: make_window(row['start'],row['stop'], full_w_size), axis=1)]
w_stop_list = [x[1] for x in sv_df_full.apply(lambda row: make_window(row['start'],row['stop'], full_w_size), axis=1)]
sv_df_full['w_start'] = w_start_list
sv_df_full['w_stop'] = w_stop_list
sv_df_full


bam_open = pysam.Samfile(bam_file)

for index,row in sv_df_full.iterrows():
      
    # Create data frame of 1kb windows
    start = int(row['w_start'])
    stop = int(row['w_stop'])
    window_start = np.arange(start, start+full_w_size, small_w_size+1)
    window_end = window_start+small_w_size
    df = pd.DataFrame([window_start, window_end]).transpose()
    df.columns = ['window_start','window_end']
    df['chrom'] = str(row['chrom'])
    df = df[['chrom','window_start','window_end']]
    
    # Make a list of barcodes in each of the 1kb windows
    region_bcs = []
    for i,r in df.iterrows():  
        region_bc_list = get_barcode_ids(bam_open, r['chrom'], r['window_start'], r['window_end'], MIN_MAPQ, PERF_CIGAR)
        region_bcs.append(region_bc_list)
    
    # Make list of SV-specific barcodes
    bc_list = (row['bc_overlap_id']).split(',') 
    
    # For each SV-specific barcode, count the number of times it occurs in each region
    for bc in bc_list:
        df[bc] = [x.count(bc) for x in region_bcs]
    
    # Write output to file
    cur_name = str(row['name'])
    df.to_csv(cur_name + ".bc_windows.txt", sep="\t", index=False)


